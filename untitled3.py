# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1je73E_dhjwSEiDHKqcMKiOinb5A_Ba1F
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping

# Upload file CSV ke Google Colab
from google.colab import files
uploaded = files.upload()

# Membaca dataset
df = pd.read_csv('creditcard.csv')
df.head()

print(df.info())
print(df.describe())

# Memeriksa distribusi kelas
sns.countplot(x='Class', data=df)
plt.title('Distribusi Kelas Penipuan')
plt.show()

# Memisahkan fitur dan label
X = df.drop(columns='Class')
y = df['Class']

# Normalisasi data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Membagi data menjadi set pelatihan dan pengujian
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Membangun model Deep Learning untuk feature extraction
model = Sequential()
model.add(Dense(64, input_dim=X_train.shape[1], activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(32, activation='relu'))
model.add(Dense(16, activation='relu'))
model.add(Dense(8, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Melatih model
early_stopping = EarlyStopping(monitor='val_loss', patience=3)
model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2, callbacks=[early_stopping])

# Menggunakan model untuk feature extraction
intermediate_layer_model = tf.keras.Model(inputs=model.input, outputs=model.get_layer(index=-2).output)
X_train_new = intermediate_layer_model.predict(X_train)
X_test_new = intermediate_layer_model.predict(X_test)

# Membangun model KNN
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train_new, y_train)

# Memprediksi dengan model KNN
y_pred = knn.predict(X_test_new)

# Evaluasi model
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

print("\nClassification Report:")
print(classification_report(y_test, y_pred))

print("\nAccuracy Score:")
print(accuracy_score(y_test, y_pred))